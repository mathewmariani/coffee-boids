// Generated by CoffeeScript 2.7.0
var Vector2;

Vector2 = (function() {
  var i, len, name, ref;

  class Vector2 {
    static sqrDistance(a, b) {
      var dx, dy;
      dx = a.x - b.x;
      dy = a.y - b.y;
      return dx * dx + dy * dy;
    }

    static distance(a, b) {
      return Math.sqrt(Vector2.sqrDistance(a, b));
    }

    constructor(x = 0, y = 0) {
      this.x = x;
      this.y = y;
    }

    copy() {
      return new Vector2(this.x, this.y);
    }

    magnitude() {
      return Math.sqrt(this.x * this.x + this.y * this.y);
    }

    normalize() {
      var m;
      m = this.magnitude();
      if (m > 0) {
        this.divide(m);
      } else {
        this.x = 0;
        this.y = 0;
      }
      return this;
    }

    clamp(max) {
      if (this.magnitude() > max) {
        this.normalize();
        this.multiply(max);
      }
      return this;
    }

    add(other) {
      this.x += other.x;
      this.y += other.y;
      return this;
    }

    subtract(other) {
      this.x -= other.x;
      this.y -= other.y;
      return this;
    }

    multiply(c) {
      this.x *= c;
      this.y *= c;
      return this;
    }

    divide(c) {
      if (c !== 0) {
        this.x /= c;
        this.y /= c;
      }
      return this;
    }

    scale(other) {
      this.x *= other.x;
      this.y *= other.y;
      return this;
    }

  };

  ref = ['add', 'subtract', 'multiply', 'divide'];
  // Class methods for nondestructively operating
  for (i = 0, len = ref.length; i < len; i++) {
    name = ref[i];
    (function(name) {
      return Vector2[name] = function(vec1, vec2) {
        return vec1.copy()[name](vec2);
      };
    })(name);
  }

  return Vector2;

}).call(this);

export default Vector2;
