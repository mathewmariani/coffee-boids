// Generated by CoffeeScript 2.7.0
var Actor;

import Vector2 from './vector2.js';

import {
  shared
} from './shared.js';

Actor = class Actor {
  constructor(x, y) {
    // constants
    this.max_acceleration = 10;
    this.max_speed = 120;
    this.fov = Math.PI * 1.5;
    this.position = new Vector2(0, 0);
    this.acceleration = new Vector2(0, 0);
    this.velocity = new Vector2(0, 0);
    this.forward = new Vector2(0, 0);
  }

  canSee(target) {
    var cosTheta, dotProduct, toTarget;
    toTarget = Vector2.subtract(target.position, this.position);
    cosTheta = Math.cos(this.fov / 2);
    dotProduct = this.forward.dot(toTarget.normalize());
    return dotProduct >= cosTheta;
  }

  steerTowards(target) {
    var steer;
    steer = target.normalize().multiply(this.max_speed).subtract(this.velocity);
    return steer.normalize().multiply(shared.boidMaxSteerForce);
  }

  wrap() {
    if (this.position.x < 0) {
      this.position.x += canvas.width;
    } else if (this.position.x > canvas.width) {
      this.position.x -= canvas.width;
    }
    if (this.position.y < 0) {
      this.position.y += canvas.height;
    } else if (this.position.y > canvas.height) {
      this.position.y -= canvas.height;
    }
  }

  applyForce(force) {
    this.acceleration.add(force);
  }

  update() {}

  physics() {
    var delta_time;
    delta_time = 1 / 60;
    // integration step
    this.velocity.add(Vector2.multiply(this.acceleration, 1.0));
    this.velocity.clamp(100, this.max_speed);
    this.position.add(Vector2.multiply(this.velocity, delta_time));
    this.forward = this.velocity.copy().normalize();
  }

};

export default Actor;
