// Generated by CoffeeScript 2.7.0
var canvas, ctx, gui, raf, resizeCanvas, setPopulation, start;

import {
  shared
} from "./shared.js";

import GUI from "https://cdn.jsdelivr.net/npm/lil-gui@0.20/+esm";

gui = new GUI();

gui.add(shared, "separationDistance", 0, 100);

gui.add(shared, "alignmentForce", 0, 10);

gui.add(shared, "separationForce", 0, 10);

gui.add(shared, "cohesionForce", 0, 10);

gui.add(shared, "boidCount", 0, 1000, 1);

gui.add(shared, "boidRadius", 0, 100);

gui.add(shared, "drawRadius");

gui.add(shared, "drawNeighbors");

// get canvas
canvas = document.getElementById("canvas");

ctx = canvas.getContext("2d");

resizeCanvas = function() {
  canvas.width = window.innerWidth;
  canvas.height = window.innerHeight;
};

window.addEventListener("orientationchange", resizeCanvas, false);

window.addEventListener("resize", resizeCanvas, false);

raf = window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame || function(callback) {
  return window.setTimeout(callback, 1000 / 60);
};

import Boid from "./boid.js";

setPopulation = function(size) {
  var current_size, i, j, ref, ref1, results, x, y;
  current_size = Boid.all.length;
  if (size > current_size) {
    results = [];
    for (i = j = ref = current_size, ref1 = size; (ref <= ref1 ? j < ref1 : j > ref1); i = ref <= ref1 ? ++j : --j) {
      x = Math.random() * canvas.width;
      y = Math.random() * canvas.height;
      results.push(new Boid(x, y));
    }
    return results;
  } else if (size < current_size) {
    return Boid.all.splice(size);
  }
};

start = function() {
  var draw;
  draw = function() {
    var b, boid, j, k, len, len1, n, ref, ref1;
    setPopulation(shared.boidCount);
    ctx.clearRect(0, 0, canvas.width, canvas.height);
    ref = Boid.all;
    for (j = 0, len = ref.length; j < len; j++) {
      boid = ref[j];
      boid.update();
      boid.render(ctx);
    }
    if (Boid.all[0] != null) {
      b = Boid.all[0];
      if (shared.drawRadius) {
        ctx.save();
        ctx.fillStyle = "hsla(0, 0%, 63.53%, 0.25)";
        ctx.strokeStyle = "hsl(180, 3.7%, 95.29%)";
        ctx.lineWidth = 2;
        ctx.beginPath();
        ctx.arc(b.position.x, b.position.y, shared.boidRadius, 0, 2 * Math.PI, false);
        ctx.fill();
        ctx.stroke();
        ctx.closePath();
        ctx.restore();
      }
      if (shared.drawNeighbors) {
        ref1 = b.getNeighborhood();
        for (k = 0, len1 = ref1.length; k < len1; k++) {
          n = ref1[k];
          ctx.save();
          ctx.strokeStyle = "hsla(0, 100%, 50%, 0.5)";
          ctx.beginPath();
          ctx.moveTo(b.position.x, b.position.y);
          ctx.lineTo(n.position.x, n.position.y);
          ctx.stroke();
          ctx.closePath();
          ctx.restore();
        }
      }
    }
    raf(draw);
  };
  draw();
};

// start immediately
setTimeout(function() {
  resizeCanvas();
  return start();
}, 0);
